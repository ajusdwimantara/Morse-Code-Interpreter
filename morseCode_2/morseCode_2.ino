#include "math.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <pgmspace.h>

#define INPUT_NETWORK 11
#define HIDDEN_NETWORK 25 //15
#define OUTPUT_NETWORK 35

#define buzzer_pin 18
#define button_pin 19

String output_data="";
bool add_space = false;
int buttonState;            // the current reading from the input pin
int lastButtonState = HIGH;  // the previous reading from the input pin

// the following variables are unsigned longs because the time, measured in
// milliseconds, will quickly become a bigger number than can be stored in an int.
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers

bool reseted = false;
float input_data[11] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
// measure
int data_idx;
bool measuring = false;
bool start_measure = false;
bool released_measure = false;
unsigned long dot_time = 0;
unsigned long space_time = 0;
unsigned long pressed_time = 0;
unsigned long released_time = 0;
unsigned long waiting_time = 0;

bool data_ready = false;

// OLED
Adafruit_SSD1306 display(
  128,  // 螢幕寬度
  64,   // 螢幕高度
  &Wire // 指向 Wire 物件的指位器, I2C 通訊用
);

void reset(){
  measuring = false;
  start_measure = false;
  released_measure = false;
  dot_time = millis();
  space_time = millis();
  pressed_time = millis();
  released_time = millis();
  waiting_time = millis();
  data_idx = 0;
  add_space = false;
}

const float weight_hid[] PROGMEM = {0.100005, 0.6, 0.399998, 0.899997, 0.399998, 0.899997, 0.799998, 0.3, 0.300001, 0.799999, 0.199999, 0.100001, 0.4, 2.78285e-06, 0.100002, 0.3, 0.699999, 0.400002, 0.799998, 0.100003, 0.200001, 0.1, 0.799998, 0.799998 ,0.499999,
                                      0.700005, 0.5, -1.87505e-06, 0.599997, 0.599998, 0.899997, 0.899997, 0.8, 0.500002, 0.699998, 0.199999, 0.800002, 0.3, 0.100004, 0.600002, 0.4, 0.499999, 2.12894e-06, 0.699997, 0.400004, 0.200001, 0.300001, 0.799998, -2.70452e-06, 0.699999,
                                      0.300013, 0.899998, 0.699995, 0.899993, 0.499995, -7.70452e-06, 0.79999, 0.8, 0.900005, -4.32816e-06, 0.0999985, 0.800004, 4.62993e-07, 0.90001, 0.500005, 0.3, 0.599997, 0.600005, 0.799992, 0.600008, 0.800003, 0.600002, 0.199993, 0.0999925, 0.0999986,
                                      0.599997, 0.900001, 0.800003, 0.100002, 1.46738e-06, 2.89371e-06, 0.200005, 0.7, 0.699999, 0.700002, 0.700001, -1.0995e-06, 0.6, 0.799997, 0.4, 5.49772e-07, 0.200001, 0.399999, 0.100004, 0.199998, 0.9, 0.7, 0.100004, 3.69409e-06, 0.300001,
                                      0.899976, 0.300006, 0.100016, 0.900014, 0.500009, 0.500017, 2.89517e-05, 0.500001, 0.299989, 0.300011, 0.200005, 0.0999906, 0.8, 0.699978, 0.899993, 0.900002, 0.600007, 0.899993, 0.400021, 0.599983, 0.299996, 0.199998, 0.20002, 0.700021, 0.800003,
                                      0.199997, 0.200001, 0.800002, 0.400002, 0.900001, 0.700003, 0.600005, 0.9, 0.0999987, 0.100002, 0.300001, 0.399999, 7.79622e-08, 0.399997, 0.899999, 0.9, 0.500001, 0.399999, 0.600003, 0.099998, 0.399999, 0.4, 0.400003, 0.600003, 0.6,
                                      0.600001, 0.200001, 1.944e-07, 1.56609e-07, 0.400001, 0.900001, 0.100005, 0.8, 0.600001, 0.800001, 0.4, 0.700002, 2.8085e-07, 0.099998, 0.1, 0.1, 0.800001, 0.9, 0.100003, 0.800001, 0.9, 0.6, 0.700003, 0.600001, 0.3,
                                      0.0, 0.4, 0.3, 0.9, 0.9, 0.4, 0.3, 0.3, 0.6, 0.7, 0.2, 0.7, 0.9, 0.8, 0.2, 0.1, 0.4, 0.9, 0.5, 0.0, 0.2, 0.3, 0.4, 0.3, 0.1,
                                      0.9, 0.1, 0.8, 0.7, 0.2, 0.6, 0.0, 0.3, 0.8, 0.3, 0.2, 0.7, 0.8, 0.2, 0.0, 0.8, 0.4, 0.2, 0.4, 0.7, 0.9, 0.6, 0.1, 0.6, 0.3,
                                      0.6, 0.8, 0.0, 0.9, 0.2, 0.4, 0.3, 0.2, 0.1, 0.4, 0.1, 0.4, 0.6, 0.0, 0.6, 0.5, 0.8, 0.1, 0.9, 0.5, 0.1, 0.4, 0.9, 0.3, 0.3,
                                      0.2, 0.0, 0.4, 0.2, 0.7, 0.3, 0.1, 0.7, 0.9, 0.2, 0.5, 0.5, 0.0, 0.7, 0.3, 0.6, 0.2, 0.9, 0.5, 0.7, 0.8, 0.6, 0.6, 0.6, 0.8
                                      };

const float threshold_hid[] PROGMEM = {0.699977, 0.800002, 0.900009, 0.200016, 9.60246e-06, 0.600016, 0.700016, 0.3, 0.899991, 0.600008, 3.19478e-06, 0.899991, -7.64025e-07, 0.899985, 0.399991, 0.400001, 0.800005, 0.49999, 0.600014, 0.599984, 0.399995, 0.0999969, 0.800012, 0.900013, 0.100003};

const float weight_out[] PROGMEM = {-10.089, -9.95188, 2.58716, -0.911303, -4.42071, 15.8318, -5.3068, 1.04969, -3.21099, 14.1466, 5.2134, -3.55925, -14.8835, -11.5977, 3.66518, 6.80703, -1.44101, 1.26739, 6.27824, -13.6129, 19.2159, 4.22117, 10.3284, -1.33969, 11.3603, -6.89667, 0.124693, -0.342696,
                                      0.314391, 0.275546, 0.539729, 0.50685, 0.463106, 0.203942, 0.36355, 1.39282, -4.02281, 0.0215149, 6.03705, -10.118, -12.0161, 20.0205, -9.69767, -8.0467, 0.358987, -2.9617, 2.04012, 9.28797, -2.56288, 12.8077, 0.353493, 5.55314, 13.2541, 2.16422, -5.78231, 4.97871,
                                      -8.91172, 5.25829, -1.04648, -10.2552, 6.98716, 0.406173, -0.359272, 0.601436, 0.160585, -0.0769814, 0.188597, 0.249265, 0.488768, 0.24707, 0.730436, 6.19914, 4.47033, -0.44805, -1.44866, -5.45454, 13.6158, 7.54968, -5.70526, 0.200229, -9.71664, 9.2992, 2.81463, -4.06774,
                                      -0.269713, 8.39627, 5.62, 7.65335, -2.47847, 0.425377, -6.78889, -6.40761, -1.0934, -5.24541, -13.2262, 8.79735, 0.376932, -0.195147, -0.245044, 0.0215407, 0.590524, -0.0371058, -0.187564, 0.64446, 0.210149, 7.04508, -4.44367, 3.37657, 6.31082, -7.86735, -6.25947, 8.54127,
                                      -15.9204, -4.12182, -10.6256, 14.1899, -7.45515, 13.8314, 7.90561, 16.0793, -1.38772, -5.5386, 3.36643, 0.62606, 5.61799, 6.066, -16.9878, 11.7765, -7.7625, -3.76521, 4.78291, 0.0726051, 0.41706, -0.30028, -0.3544, -0.205239, -0.149553, -0.469358, -0.0174082, 0.426066, 7.16615,
                                      5.43667, -0.852375, -3.879, 1.19699, 2.47253, -8.51311, 6.82333, 7.4541, -3.90429, -0.618595, 4.15004, 3.83623, 5.46573, -4.22411, 3.5065, -0.932489, -2.66853, -0.872748, 1.56689, -6.13241, 1.85797, -1.78256, -0.97588, -1.58367, 0.829228, 0.29263, 0.434771, -0.285912, 0.362255,
                                      0.413206, 0.0713918, 0.247721, 0.197825, -0.156496, -14.2583, 12.6586, 11.1352, 4.01694, -3.82489, 1.83072, -6.72947, 3.35528, -5.04819, 3.74599, 6.87725, -5.55636, 1.09815, 9.35673, -3.19991, -2.96312, 8.48795, -18.0074, -10.142, 9.36401, -6.25766, 5.45996, -21.6492, 18.0835, 13.2251,
                                      4.04858, -0.318138, 0.415559, 0.380794, -0.161183, 0.197664, -0.437069, -0.075512, 0.467063, -0.0766143, 10.7763, 5.33753, -1.95867, 4.51429, -12.1462, -19.2131, 11.5199, -7.15355, 0.800766, -9.74339, -3.83636, 5.30548, 22.9658, 14.5199, 8.18057, -0.922154, 9.53743, 5.06433, -2.32057,
                                      0.0754016, -8.96211, -11.8884, -8.29864, 4.88356, -13.787, 10.959, -0.00799276, 0.226708, -0.309404, 0.248706, 0.109391, 0.374887, -0.26233, 0.576368, 0.13351, 1.99703, 4.12935, -0.750075, -5.03182, -9.90847, 4.85, -3.74466, 12.2323, 0.151065, 5.2202, -10.2051, 12.1195, -0.7906, -4.62347,
                                      -6.57594, 7.44109, 5.33846, 4.42684, 1.39123, -15.1442, -2.51279, 7.9334, -0.326552, 3.27895, 0.773849, 0.107344, 0.150227, 0.225663, 0.374695, 0.227586, 0.284728, 0.459706, -0.1895, -0.441712, 0, 5.43156, -5.82731, -5.80353, -2.0628, -8.63638, -7.22978, 8.51606, -7.71665, -2.85221, 9.61738,
                                      -9.97238, 8.94399, 4.97558, -5.00794, 5.02172, 3.28132, 10.0667, 11.7404, 1.12322, -12.2129, 0.17087, 2.97587, 5.91624, 1.9335, -1.21896, 5.21112, 0.444409, 0.576239, 0.230294, 0.0932418, 0.0595925, 0.327902, -0.217229, -0.280759, -0.118258, -17.0678, 6.25237, 5.90609, 12.8219, -1.90773,
                                      -3.25241, 10.1365, -0.651056, -7.56342, 4.34215, 5.87486, -8.6124, -3.73501, 3.17666, -0.791323, -12.6482, 4.78417, -7.26732, -0.930985, 9.17965, 4.47108, 5.03107, -18.8872, 17.9444, 8.99575, -0.597721, -0.405506, 0.127099, -0.309636, -0.150365, 0.109835, 0.17651, 0.536136, -0.322829,
                                      -0.365378, -2.94574, 3.43567, -3.18357, 5.89476, 11.5978, 3.12304, 2.56168, 10.7917, 5.08473, -0.110318, -2.59211, -0.180142, -9.02389, -0.937761, -10.9424, -6.60401, -4.54728, 1.3859, 6.86055, 6.7215, 2.70829, 7.25573, -6.4894, 2.27624, -1.47474, -5.74126, 0.242115, -0.220974, 0.450897,
                                      0.504503, 0.259994, -0.276426, -0.108636, 0.536432, 0.487138, 16.4702, -0.92144, -12.7378, -10.4402, -8.04492, -5.47978, -9.60505, -1.58493, 8.70279, 8.43005, -15.7259, 17.0382, 11.9734, 3.23125, -6.18997, 5.95044, 15.4158, 5.4634, -1.25248, -13.8036, -12.386, 9.00302, -0.672657, 5.56082,
                                      -0.181937, 5.3348, -0.126364, -0.197307, 0.0524123, -0.181536, -0.312402, 0.158875, 0.00936482, 0.541929, 0.307666, -10.3412, -6.58365, 3.91548, 12.8071, 10.6004, 7.41613, 7.7703, -2.58564, -1.30663, -5.72736, 17.5092, -16.4215, -10.0187, -1.27419, 8.28753, -7.32424, -17.6713, 0.808607, 11.004,
                                      9.39299, 19.9682, -7.44194, 7.35904, -7.25248, 0.841346, -9.63921, 0.321427, 0.359852, 0.135334, 0.0868038, 0.140272, -0.0978465, 0.0727883, -0.179364, -0.031513, 1.64091, -11.0899, 1.06481, -6.76953, -4.15221, 6.53871, 5.20843, -1.91865, -5.56837, 11.0626, -3.8259, 6.92492, -6.54381, -15.2005,
                                      9.74187, 15.8036, -0.138131, 14.1549, 3.08169, -14.2934, 12.0132, -4.09089, 22.911, -16.2243, -5.18884, 1.05977, 0.166503, 0.196988, 0.347528, 0.612306, 0.581039, 0.450962, -0.0974, -0.261868, 0.201991, -1.71459, -4.39395, 4.77488, -4.59021, -3.65753, 14.2874, -7.23737, 9.43676, 0.61276, 4.58034,
                                      4.72201, 2.80188, -8.96895, -8.09479, 3.20589, 13.6519, -4.10907, 2.67726, 5.01104, -12.4321, 12.7514, -4.18013, 12.8195, -12.7358, 0.252372, -3.45041, -0.233647, 0.203965, -0.129302, -0.274336, -0.41574, -0.153173, 0.412539, -0.341922, -0.18889, -3.61085, 0.312102, 9.44752, -4.81508, 1.86258,
                                      13.405, -10.2422, 6.26322, -0.476917, 0.332574, 9.75237, -3.07688, -6.03471, -2.14625, 4.55266, 12.0877, -5.10566, -6.00883, -1.3099, -0.239563, 6.50047, -6.17121, 8.04818, -9.22741, 4.49199, -1.99473, 0.382045, 0.117132, -0.217819, 0.139278, -0.301078, 0.263796, 0.326431, 0.369599, 0.424383,
                                      -4.63041, 4.00027, 8.45619, -2.99397, -7.3388, -1.48219, -0.390472, -6.09558, -8.77599, 6.72585, 1.26251, 0.52973, 3.66707, 0.149683, 4.65567, 4.01588, 10.5164, -6.0745, -10.1062, 0.268516, -6.59547, 3.04462, -2.77017, 8.14581, 9.79436, 7.80427, 0.308481, -0.157959, 0.602201, -0.337877, 0.324304,
                                      0.490077, 0.549206, 0.389748, 0.248762, -7.27064, -0.194972, 8.35743, -7.32927, -0.310089, 9.65993, -4.67426, -2.30553, -9.57173, 10.3635, 3.0109, 0.570768, -9.80088, -11.3731, 2.78392, 6.81121, 4.58559, -4.23888, -8.13299, -1.1498, -1.82157, 8.5457, 7.70812, 1.59937, 13.8205, 3.22964, 0.372858,
                                      0.509547, 0.174922, 0.331062, 0.289972, 0.352824, 0.316941, -0.0378031, -0.0831844, 7.09749, 1.89915, 3.04464, 2.21584, -9.93664, -11.971, 7.58322, -9.77892, -3.06469, -8.59711, 3.41905, -0.492667, 18.027, 9.27264, 12.9138, 2.16877, 4.30773, 2.35037, -4.15051, 1.37015, -3.24042, -13.3277, 0.655473,
                                      -0.892283, -7.07374, 9.31459, -0.0330594, -0.296167, 0.171499, 0.126996, -0.214727, -0.351594, 0.214707, -0.143002, -0.288873, 4.35375, -6.19705, -3.91408, -7.83576, -2.11537, 5.43138, -9.00683, -4.38247, 1.96205, 11.6406, -3.49802, 4.48275, -2.88959, -5.44352, -0.0986342, 3.93727, 5.30945, 1.63407,
                                      -0.29479, -9.52751, 0.243513, 10.6051, 9.49884, 1.3036, 10.0718, -0.679741, 0.519492, -0.347424, 0.310691, 0.571388, -0.0648669, -0.0978882, -0.240255, -0.000676459, 0.258745, 2.45644, 2.14673, -3.56804, -4.70207, -2.25666, 0.951428, 2.72634, 6.86112, -2.56253, 10.3489, -14.9719, 12.9691, -4.59131,
                                      -9.79916, -8.42005, 4.42136, 8.39201, 7.38151, -0.0914913, -9.47614, -7.25269, 12.5693, 0.253664, 4.31482, 2.54072, 3.94005, -0.140903, -0.202526, 0.364809, 0.419269, 0.0771521, 0.0389249, 0.205922, 0.251257, -0.195377, 6.13115, 1.22949, -7.57129, -1.99034, 3.64324, 1.12046, -0.033926, 8.83925, 6.02348,
                                      3.46228, -11.489, 9.69612, -2.13462, -3.08567, -9.39963, 0.0927321, 1.70477, 7.07408, 4.6745, -5.08563, -4.15713, 9.54175, -0.200199, 1.20122, -2.92857, -0.449916, 0.131155, 0.170807, -0.0565959, 0.0952462, 0.150257, 0.411204, 0.482015, -0.371275, 0.478581, -5.28514, 8.25486, 4.59929, 5.2681, -5.13744, -7.93725,
                                      1.49667, -2.40264, -2.43455, 0.33396, 1.3052, -2.42597, 8.19449, 10.7164, -0.650596, -6.42523, 10.0628, -9.83901, -7.21964, 7.24435, -7.85138, 2.20761, -17.9764, 17.3731, 7.25214, 5.14135, 0.0357899, 0.265419, -0.277673, -0.114343, 0.049971, 0.119732, -0.226057, 0.609972, 0.472048, -13.9609, 9.14669, 20.1,
                                      -0.979077, 3.10755, 3.80965, -2.27974, -2.75294, -10.5846, 4.2578, 11.9847, -10.5622, -4.69858, -0.143004, 3.70793, 0.890036, 5.58738, -17.4959, -14.1662, 15.8036, -6.66663, -0.639775, -7.45337, 7.64184, 16.1409, 4.57498, 0.27233, 0.198696, 0.649935, 0.117085, -0.215285, 0.257389, 0.60547, 0.239432, 0.304935,
                                      -8.72043, 0.894467, 4.60212, 5.7617, 2.59, 8.04538, -2.70261, 5.54109, -0.254536, -2.99275, 11.7573, -7.69996, -5.71522, 1.43645, 2.50313, -0.57293, -7.55511, -5.90384, 4.0902, 4.69062, 10.23, -2.32266, -0.456808, 0.145555, 3.08175, -4.98113, -0.490753, 0.149323, 0.0261329, 0.176241, 0.428563, 0.388416, 0.0612296, 0.210892, 0.258092};

const float threshold_out[] PROGMEM = {-21.3519, 0.415959, 22.2793, -5.74205, -38.4019, 5.55286, 5.78102, -5.19494, -31.8657, 25.7025, 0.572649, 5.77685, -2.43519, -16.7772, 16.8589, 23.2217, 24.4049, -2.41834, -15.9241, -24.6101, 5.43299, -5.6474, 1.71263, 8.42455, 15.0631, 15.0812, 1.08572, 1.02478, 1.09892, 1.37796, 1.15456, 1.31313, 1.49705, 1.42481, 1.11073};
class ArtificialNeuralNetwork{
private:
  // --- Input layer to Hidden layer ----
  float Wij;
  
  float threshold_hidden;
  float s_hidden[HIDDEN_NETWORK], y_hidden[HIDDEN_NETWORK];
  float input[INPUT_NETWORK];
  
//   --- Hidden layer to Output layer
  float Wjk;

  float threshold_output;
  float s_output[OUTPUT_NETWORK], y_output[OUTPUT_NETWORK];

public:
  
  ArtificialNeuralNetwork(){
      
  };
  ~ArtificialNeuralNetwork(){};

  void feedForward1(){
    // Reset
    for(int j=0; j<HIDDEN_NETWORK; j++) {
        this->s_hidden[j] = 0;
    }
    // Calculate Strength Hidden
    for(int j=0; j<HIDDEN_NETWORK; j++) {
        for(int i=0; i<INPUT_NETWORK; i++) {
            memcpy_P(&Wij, &weight_hid[i*25 + j], sizeof(float)); // Copy float from PROGMEM to RAM
            this->s_hidden[j] += this->input[i]*Wij;
        }
//        Serial.print("Wij: ");
//        Serial.println(Wij);
    }
    for(int j=0; j<HIDDEN_NETWORK; j++) {
        memcpy_P(&threshold_hidden, &threshold_hid[j], sizeof(float)); // Copy float from PROGMEM to RAM
        this->s_hidden[j] -= this->threshold_hidden;
    }

    // Calculate Activation Function Hidden
    for(int j=0; j<HIDDEN_NETWORK; j++) {
        // Sigmoid
        y_hidden[j] = 1/(1 + exp(-s_hidden[j]));
//        Serial.print("y_hidden: ");
//        Serial.println(y_hidden[j]);
    }
  }
  void feedForward2(){
    // Reset
    for(int k=0; k<OUTPUT_NETWORK; k++) {
        s_output[k] = 0;
    }
    // Calculate Output Strength
     for(int k=0; k<OUTPUT_NETWORK; k++) {
        for(int j=0; j<HIDDEN_NETWORK; j++) {
            memcpy_P(&Wjk, &weight_out[j*35 + k], sizeof(float)); // Copy float from PROGMEM to RAM
            s_output[k] += y_hidden[j]*Wjk;
        }
//        Serial.print("Wjk: ");
//        Serial.println(Wjk, 5);
    }
    for(int k=0; k<OUTPUT_NETWORK; k++) {
        memcpy_P(&threshold_output, &threshold_out[k], sizeof(float)); // Copy float from PROGMEM to RAM
        s_output[k] -= threshold_output;
    }
    

    // Calculate Activation Function
    for(int k=0; k<OUTPUT_NETWORK; k++) {
        // Softmax
        double sumExp = 0.0;

        // Compute the sum of exponentials of input values
        for (float val : s_output) {
            sumExp += exp(val);
        }
        y_output[k] = (exp(s_output[k]) / sumExp);
    }
  }

  void insertInput(float input[]){
    Serial.print("Input: ");
    for(int i=0;i<INPUT_NETWORK;i++){
        this->input[i] = input[i];
//        Serial.print(this->input[i], 5);
    }
//    Serial.println("");
  }

  char displayOutput(){
    int max_index = 0;
    for(int k=0;k<35;k++){
        if(y_output[max_index] < y_output[k]){
            max_index = k;
        }
    }

    int predicted_output[35] = {0};
    predicted_output[max_index] = 1;
    Serial.print("predicted output: ");

    Serial.println((char)(65+max_index));

    return (char)(65+max_index);
  }

  void Test(){
    Serial.println("KONTTT");
  }
};

ArtificialNeuralNetwork* nn1;

void setup() {
  // put your setup code here, to run once:
  nn1 = new ArtificialNeuralNetwork();
  Serial.begin(115200);
  pinMode(buzzer_pin, OUTPUT);
  pinMode(button_pin, INPUT_PULLUP);

  // OLED 初始化
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)){
    Serial.println("OLED Initialization failed, please reset");
    while(1);
  }
  else{
    Serial.println("OLED Initialization success");
  }
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(30, 10);
  // Display static text
  display.println("MORSE CODE");

  display.setCursor(30, 20);
  // Display static text
  display.println("INTERPRETER");
  display.display(); 
}

void loop() {
  // put your main code here, to run repeatedly:
  int reading = digitalRead(button_pin);

  // If the switch changed, due to noise or pressing:
  if (reading != lastButtonState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
  }

  

  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer than the debounce
    // delay, so take it as the actual current state:

    // if the button state has changed:
    if (reading != buttonState) {
      buttonState = reading;

      // only toggle the LED if the new button state is HIGH
      if (buttonState == LOW) {
        digitalWrite(buzzer_pin, HIGH);
        if(!start_measure){
          measuring = true;
          start_measure = true;
          dot_time = millis();
        }
        if(released_measure){
          released_measure = false;
          released_time = millis() - space_time;
          Serial.print("Space: ");
          Serial.println(released_time);
          input_data[data_idx++] = float(released_time)/1000;
        }
      }
      else{
        digitalWrite(buzzer_pin, LOW);
        if(start_measure){
          start_measure = false;
          pressed_time = millis() - dot_time;
          Serial.print("Dot: ");
          Serial.println(pressed_time);
          input_data[data_idx++] = float(pressed_time)/1000;
        }
        if(measuring){
          reseted = false;
          if(!released_measure){
            space_time = millis();
            released_measure = true; 
          }
        }
        
      }
    }
  }

  if(released_measure){
    if(millis() - space_time > 2000.0){
      if(!reseted){
        reset();
        reseted = true;
        Serial.println("KONZZ");
        data_ready = true;
      }
    }
    
  }
  
  
  // save the reading. Next time through the loop, it'll be the lastButtonState:
  lastButtonState = reading;
//  float input[] = {172.0/1000, 183.0/1000, 177.0/1000, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
//  nn1->insertInput(input);
//  nn1->feedForward1();
//  nn1->feedForward2();
//  nn1->displayOutput();

    if(data_ready){
      nn1->insertInput(input_data);
      nn1->feedForward1();
      nn1->feedForward2();
      output_data += nn1->displayOutput();
      data_ready = false;

      Serial.print("word: ");
      Serial.println(output_data);
      for(int i=0;i<INPUT_NETWORK;i++){
        input_data[i] = 0.0;
      }
      waiting_time = millis();
      add_space = true;

      display.clearDisplay();

      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0, 10);
      // Display static text
      display.println(output_data);

      display.display();
    }
    else if((millis() - waiting_time > 1500.0) && (add_space) && (!measuring)){
      add_space = false;
      output_data += " ";
      Serial.print("word: ");
      Serial.println(output_data);

      display.clearDisplay();

      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0, 10);
      // Display static text
      display.println(output_data);

      display.display();
    }
}
